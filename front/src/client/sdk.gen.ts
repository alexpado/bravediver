// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { UserDataData, UserDataResponses, UserDataErrors, UserData1Data, UserData1Responses, UserData1Errors, ApplicationDataData, ApplicationDataResponses, AuthenticateData, AuthenticateResponses, AuthenticateErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get user data
 * Retrieve the current preferences / unlocks of the logged in user.
 */
export const userData = <ThrowOnError extends boolean = false>(options?: Options<UserDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserDataResponses, UserDataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/me',
        ...options
    });
};

/**
 * Set user data
 * Define the current preferences / unlocks of the logged in user.
 */
export const userData1 = <ThrowOnError extends boolean = false>(options: Options<UserData1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserData1Responses, UserData1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all stratagems
 * Retrieve a list of all available stratagems
 */
export const applicationData = <ThrowOnError extends boolean = false>(options?: Options<ApplicationDataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ApplicationDataResponses, unknown, ThrowOnError>({
        url: '/api/v1/data',
        ...options
    });
};

/**
 * Authenticate with Discord
 * Use the code provided to try and authenticate with Discord servers.
 */
export const authenticate = <ThrowOnError extends boolean = false>(options: Options<AuthenticateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AuthenticateResponses, AuthenticateErrors, ThrowOnError>({
        url: '/api/v1/auth/{code}',
        ...options
    });
};