// This file is auto-generated by @hey-api/openapi-ts

/**
 * Used as request body to update a user preferences.
 */
export type PostProfile = {
    /**
     * The user's list of unlocked stratagems identifiers
     */
    stratagems?: Array<number>;
};

/**
 * Represents a user profile.
 */
export type Profile = {
    /**
     * The user's discord identifier
     */
    id?: string;
    /**
     * The user's discord username
     */
    username?: string;
    /**
     * The user's list of unlocked stratagems identifiers
     */
    stratagems?: Array<number>;
};

/**
 * Used when something isn't going how it is supposed to go.
 */
export type WebException = {
    /**
     * Time at which the error has been generated.
     */
    timestamp?: string;
    /**
     * Unique code for this error (one error code per reason).
     */
    code?: number;
    /**
     * Status code for the error.
     */
    status?: number;
    /**
     * Human-readable name for the status code.
     */
    error?: string;
};

/**
 * Represents the cost of something.
 */
export type Cost = {
    /**
     * The currency category type.
     */
    currency?: 'REQUISITION_SLIPS' | 'MEDALS';
    /**
     * The amount of the currency needed to meet the cost requirement.
     */
    amount?: number;
};

/**
 * Represents details about a stratagem.
 */
export type Stratagem = {
    /**
     * The stratagem's identifier.
     */
    id?: number;
    /**
     * The stratagem's name.
     */
    name?: string;
    /**
     * The path leading to the stratagem's image (without the host).
     */
    image?: string;
    /**
     * The stratagem's category type.
     */
    type?: 'SUPPORT_WEAPON' | 'OFFENSIVE' | 'DEFENSIVE' | 'BACKPACK' | 'VEHICLE';
    /**
     * The stratagem's cost (null if free).
     */
    cost?: Cost;
    /**
     * The stratagem's unlock level. If set to 0 it means that the stratagem is unlocked on a new account.
     */
    unlockLevel?: number;
};

/**
 * Represents the success of an authentication attempt.
 */
export type AuthSuccess = {
    /**
     * The session id to use in the Authorization headers.
     */
    session?: string;
};

export type UserDataData = {
    body?: never;
    headers?: {
        Authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/me';
};

export type UserDataErrors = {
    /**
     * The authorization header was incorrectly formatted.
     */
    400: WebException;
    /**
     * The authorization header is not associated to a session (can happen after a server restart).
     */
    401: WebException;
};

export type UserDataError = UserDataErrors[keyof UserDataErrors];

export type UserDataResponses = {
    /**
     * The data has been successfully retrieved.
     */
    200: Profile;
};

export type UserDataResponse = UserDataResponses[keyof UserDataResponses];

export type UserData1Data = {
    body: PostProfile;
    headers?: {
        Authorization?: string;
    };
    path?: never;
    query?: never;
    url: '/api/v1/me';
};

export type UserData1Errors = {
    /**
     * One or more stratagem ids were not recognized by the service
     */
    400: WebException;
    /**
     * The authorization header is not associated to a session (can happen after a server restart).
     */
    401: WebException;
};

export type UserData1Error = UserData1Errors[keyof UserData1Errors];

export type UserData1Responses = {
    /**
     * The data has been successfully updated.
     */
    200: Profile;
};

export type UserData1Response = UserData1Responses[keyof UserData1Responses];

export type ApplicationDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/data';
};

export type ApplicationDataResponses = {
    /**
     * Successful
     */
    200: Array<Stratagem>;
};

export type ApplicationDataResponse = ApplicationDataResponses[keyof ApplicationDataResponses];

export type AuthenticateData = {
    body?: never;
    path: {
        /**
         * The auth code given by the Discord OAuth page on the redirect uri.
         */
        code: string;
    };
    query?: never;
    url: '/api/v1/auth/{code}';
};

export type AuthenticateErrors = {
    /**
     * Authentication failure.
     */
    500: WebException;
};

export type AuthenticateError = AuthenticateErrors[keyof AuthenticateErrors];

export type AuthenticateResponses = {
    /**
     * Authentication successful.
     */
    200: AuthSuccess;
};

export type AuthenticateResponse = AuthenticateResponses[keyof AuthenticateResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};